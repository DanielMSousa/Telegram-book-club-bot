import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberUpdated
import random

API_KEY = "CENSURADA POR RAZ√ïES DE SEGURAN√áA"

bot = telebot.TeleBot(API_KEY)

@bot.message_handler(commands=['apresentacao'])
def hello(message):
    bot.send_message(message.chat.id, '''Ol√°, eu me chamo Robook e sonho em ser ser um rob√¥ que ajude v√°rios clubes do livro ü§ñüìö
    ‚ùì Eu tenho uma lista de comandos que podem ser acessados usando /ajuda (ou /help)
''')

@bot.message_handler(commands=['help', 'ajuda'])
def help(message):
  bot.send_message(message.chat.id, '''/ajuda ou /help - mensagem de ajuda com listagem de comandos
/apresentacao - permite que eu me apresenta e fale um pouco sobre minhas funcionalidades
/curiosidade - te contarei uma curiosidade aleat√≥ria da minha lista, infelizmente talvez repetida :(
/sorteio - eu posso sortear elementos de uma lista montada pelos membros do grupo
/sorteiaelimina - eu al√©m de sortear j√° retiro esse elemento da lista
/pesquisa - eu posso criar uma pesquisa com op√ß√µes dadas por membros do grupo
/escolha - eu posso escolher entre uma lista de coisas separadas entre virgula:
    exemplo: /escolha desventuras em s√©rie, Sherlock Holmes, It: a coisa
/lista - eu posso mostrar para voc√™ como est√° a lista
/tema - permite que eu crie uma mensagem interativa para acompanhar o progresso da leitura dos membros, se eu for adm eu posso at√© mesmo fix√°-la.

Elementos podem ser adicionados √† lista usando o comando /opcao, exemplos:
    /opcao Coraline
    /opcao E n√£o sobrou nenhum
Essa lista pode ser limpa (zerada) usando o comando /limpa
''')

curiosidades = [
    #Sobre livros
    'A √çndia √© o pa√≠s que mais l√™ no mundo, registrando uma m√©dia de 10 horas semanais para cada leitor.',
    '‚ÄúBibliosmia‚Äù √© o nome dado ao prazer em que as pessoas sentem ao cheirar livros antigos.',
    'A frase mais longa impressa em um livro vem da obra ‚ÄúOs Miser√°veis‚Äù, de Victor Hugo, com 823 palavras.',
    'Ler pode ajudar a prevenir doen√ßas como o Alzheimer.',
    'O papel dos livros √© feito com polpa de madeira e possui uma grande quantidade de subst√¢ncias org√¢nicas. Quando estas reagem √† luz, ao calor e √† humildade, libertam compostos org√¢nicos vol√°teis, que se traduzem num aroma a baunilha, a am√™ndoa ou flores, evocando mem√≥rias positivas, por isso os humanos gostam tanto do cheiro.',
    'Se a Wikipedia fosse um livro, teria 1133500 p√°ginas, o equivalente a 2267 volumes.',
    'Em alguns pa√≠ses √© mais barato comprar uma arma do que um livro.',
    'At√© hoje, foram produzidos mais de 400 filmes baseados nas obras de William Shakespeare.',
    'Virginia Woolf, Goethe e Hemingway tinham o h√°bito de escrever em p√©.',
    'Paulo Coelho √© o escritor brasileiro que mais vendeu livros. Os n√∫meros de exemplares ultrapassam 150 milh√µes.',
    'A caligrafia do escritor Machado de Assis era t√£o ruim que, √†s vezes, at√© ele tinha dificuldade de entender o que escrevia.',    

    #Sobre King
    'A m√£e de Stephen King havia sido dada como est√©ril quando teve ele.',
    'O pai de Stephen King saiu para comprar cigarro e nunca mais voltou.',
    'King presenciou, quando crian√ßa, um atropelamento de um amigo, que o inspirou a escrever o conto ‚Äúo corpo‚Äù.',
    'King j√° teve muitos problemas com drogas e mal se lembra de ter escrito ‚ÄúCujo‚Äù',
    'King escreveu ‚ÄúThe Running Man‚Äù, um romance de 304 p√°ginas, em apenas dez dias.',
    'King est√° no Guinness book como o autor vivo com mais adapta√ß√µes para o cinema.',
    'Carrie foi o primeiro livro publicado por King, gra√ßas aos esfor√ßos de sua esposa, Tabitha, que resgatou o manuscrito do lixo.',

    #Sobre Agatha
    'Segundo a UNESCO, Agatha Christie √© considerada a escritora mais traduzida mundialmente.',
    'Agatha Christie √© a autora do livro mais espesso do mundo, com mais de 30cm e 4032 p√°ginas nas quais est√£o inclu√≠dos todos os 12 romances e 20 contos protagonizados por Miss Marple. √â o livro mais raro da escritora.',
    'E n√£o sobrou nenhum √© o romance policial mais vendido da hist√≥ria e est√° na lista dos livros mais vendidos de sempre.',
    'O primeiro livro de Agatha Christie veio de um desafio feito pela irm√£ que dizia que ela incapaz de escrever um romance policial, ele foi rejeitado em 6 editoras.',
    'Agatha Christie tinha algumas manias estranhas, como comer ma√ß√£s na banheira, colecionar macacos de pel√∫cia e nadar no mar mesmo durante tempestades.'

    #Sobre J. K. Rowlling
    'J.K. Rowling, autora de ‚ÄúHarry Potter‚Äù, escreveu todos os livros da saga √† m√£o.',
    'A B√≠blia Sagrada, O Pequeno Livro Vermelho e a saga Harry Potter s√£o as tr√™s obras mais lidas do mundo inteiro.',
    'J. K. Rowling baseou Hermione Granger em si mesma quando era adolescente.',
    'J. K. Rowling demorou 7 anos para lan√ßar Harry Potter',
    'O manuscrito de Harry Potter foi rejeitado 12 vezes',
    'J. K. Rowling foi condecorada com o maior t√≠tulo da Inglaterra: recebeu o t√≠tulo de Oficial da Ordem do Imp√©rio Brit√¢nico em 2000, e anos depois de membro da Ordem de Companheiros de Honra por seus servi√ßos na literatura e filantropia.',
    'V√°rios dos estudantes de Hogwarts foram baseados em amigos de inf√¢ncia de J. K. Rowling',
    'Potter era o sobrenome de um dos vizinhos de J. K. Rowling com quem ela brincava de bruxos quando crian√ßa',
    'Os pais de J.K., Peter John Rowling e Anne Volant, conheceram-se na King‚Äôs Cross Station, a mesma onde Harry encontra a plataforma 9 3/4',

    #Sobre Sherlock
    'Nos livros de Sherlock Holmes, o protagonista nunca chega a dizer a c√©lebre frase "Elementar, meu caro Watson".'
]

@bot.message_handler(commands=['curiosidade'])
def manda_curiosidades(message):
    curiosidade = random.choice(curiosidades)
    bot.send_message(message.chat.id, curiosidade)

opcoes = []

@bot.message_handler(commands=['opcao'])
def add_opcao(message):
    option = message.text.replace('/opcao', '')
    if (len(option.replace(' ', '')) == 0):
        bot.reply_to(message, 'Insira uma op√ß√£o v√°lida.')
    else:
        opcoes.append(option)
        bot.reply_to(message, f'op√ß√£o "{option}" foi adicionada √† lista')

@bot.message_handler(commands=['pesquisa'])
def create_poll(message):
    if(len(opcoes) <= 1):
        bot.reply_to(message, "Op√ß√µes insuficientes, use o comando /opcao seguido do nome da sua opcao para adicion√°-la √† lista")
    else:
        msg = message.text
        msg = msg.replace('/pesquisa', '')
        if len(msg.replace(' ', '')) == 0:
            bot.send_poll(message.chat.id, "pesquisa", opcoes)
        else:
            bot.send_poll(message.chat.id, f'{msg}', opcoes)


@bot.message_handler(commands=['limpa'])
def limpa_opcoes(message):
    opcoes.clear()
    bot.reply_to(message, "lista limpa!")

@bot.message_handler(commands=['sorteio'])
def sorteio(message):
    if(len(opcoes) <= 0):
        bot.send_message(message.chat.id, "Op√ß√µes insuficientes, use o comando /opcao seguido do nome da sua opcao para adicion√°-la √† lista")
    else:
        opcao = random.choice(opcoes)
        bot.send_message(message.chat.id, f'Parab√©ns, o resultado do sorteio foi: {opcao}')

@bot.message_handler(commands=['sorteiaelimina'])
def sorteiaelimina(message):
    if(len(opcoes) <= 0):
        bot.send_message(message.chat.id, "Op√ß√µes insuficientes, use o comando /opcao seguido do nome da sua opcao para adicion√°-la √† lista")
    else:
        opcao = random.choice(opcoes)
        opcoes.remove(opcao)
        bot.send_message(message.chat.id, f'Parab√©ns, o resultado do sorteio foi: {opcao}')

@bot.message_handler(commands=['escolha'])
def escolha(message):
    choices = message.text.replace('/escolha', '')
    choices = choices.split(',')
    if(len(choices) <= 0):
        bot.reply_to(message, "Op√ß√µes insuficientes, se quiser que eu escolha entre op√ß√µes use como: /escolha a, b, c")
    else:
        c = random.choice(choices)
        bot.reply_to(message, f'Eu escolho: {c}')

@bot.message_handler(commands=['escolha'])
def escolha(message):
    choices = message.text.replace('/escolha', '')
    choices = choices.split(',')
    if(len(choices) <= 0):
        bot.reply_to(message, "Op√ß√µes insuficientes, se quiser que eu escolha entre op√ß√µes use como: /escolha a, b, c")
    else:
        c = random.choice(choices)
        bot.reply_to(message, f'Eu escolho: {c}')

@bot.message_handler(commands=['lista'])
def lista(message):
    if(len(opcoes) == 0):
        bot.reply_to(message, 'Lista vazia')
    elif(len(opcoes) == 1):
            bot.reply_to(message, f'{opcoes[0]}')
    else:
        l = ','.join(opcoes[:-1])
        l = f'{l} e {opcoes[-1]}'
        bot.reply_to(message, f'{l}')

@bot.message_handler(commands=["lembrete"])
def lembrete(message):
    msg = message.text
    msg.replace('/lembrete ', '')
    data, hora = msg.split(' - ')

def markup_tema():
    markup = InlineKeyboardMarkup(row_width=3)
    itembtn1 = InlineKeyboardButton(text="üî¥ n√£o", callback_data="n√£o comecei")
    itembtn2 = InlineKeyboardButton(text="üü° lendo", callback_data="estou lendo")
    itembtn3 = InlineKeyboardButton(text="üü¢ terminei", callback_data="terminei")
    markup.add(itembtn1, itembtn2, itembtn3)
    return markup

@bot.message_handler(commands=["tema"])
def tema(message):
    if(len(message.text.replace("/tema", "").replace(" ", "")) == 0):
        bot.reply_to(message, "por favor, escreva o nome do tema")
    else:
        msg = message.text
        msg = msg.replace('/tema ', '')
        markup = markup_tema()
        theme_msg = bot.send_message(message.chat.id,
            f'Novo tema: {msg}\nMembros que participam do tema:',
            reply_markup=markup)

        bot_id = theme_msg.from_user.id
        bot_member = bot.get_chat_member(theme_msg.chat.id, bot_id)

        if(bot_member.status == "administrator"):
            bot.pin_chat_message(theme_msg.chat.id, theme_msg.message_id)
        else:
            bot.reply_to(theme_msg, "N√£o pude fixar a mensagem, precisaria ser administrador para isso")

def replace_state(text, nome, estado):
    t = text.replace(f'\nüî¥ {nome}', f'\n{estado} {nome}')
    t = t.replace(f'\nüü° {nome}', f'\n{estado} {nome}')
    t = t.replace(f'\nüü¢ {nome}', f'\n{estado} {nome}')
    return t

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    msg_id = call.message.message_id
    chat_id = call.message.chat.id
    texto = call.message.text
    nome = call.from_user.first_name
    markup = markup_tema()

    if(nome in texto):
        if call.data == "n√£o comecei":
            novo_texto = replace_state(texto, nome,'üî¥')
        elif call.data == "estou lendo":
            novo_texto = replace_state(texto, nome, 'üü°')
        elif call.data == "terminei":
            novo_texto = replace_state(texto, nome, 'üü¢')
        if(novo_texto != texto):
            bot.edit_message_text(f'{novo_texto}', chat_id, msg_id, reply_markup=markup)
    else:
        if call.data == "n√£o comecei":
            bot.edit_message_text(f'{texto} \nüî¥ {nome}', chat_id, msg_id, reply_markup=markup)
        elif call.data == "estou lendo":
            bot.edit_message_text(f'{texto} \nüü° {nome}', chat_id, msg_id, reply_markup=markup)
        elif call.data == "terminei":
            bot.edit_message_text(f'{texto} \nüü¢ {nome}', chat_id, msg_id, reply_markup=markup)

#Quando o rob√¥ for adicionado no grupo
@bot.my_chat_member_handler()
def my_chat_m(message: ChatMemberUpdated):
    old = message.old_chat_member
    new = message.new_chat_member
    if new.status == "member":
        bot.send_message(message.chat.id, '''Ol√°, sou o novo membro desse grupo!
    Eu me chamo Robook e sonho em ser ser um rob√¥ que ajuda v√°rios clubes do livro ü§ñüìö
    ‚ùì Eu tenho uma lista de comandos que podem ser acessados usando o comando /ajuda (ou /help)
    Para me chamar basta usar um comando, eles come√ßam com uma barra (/) logo atr√°s.
''')

bot.polling()